use extensive brackets to ensure the right way of evaluating the formel
    e.g a \/ b /\ c evaluates as a \/ ( b /\ c ) instead of (a \/ b) /\ c

operation order is not valued
    negation comes first, then innermost brackets are evaluated, everything else is evaluated from right to left
    maybe I can change the right to left evaluation if I swap right and left child, but Im not sure

evaluate tree:
    return a dictionary with the string representation of the node as the key and the node value as the dictionary value
    